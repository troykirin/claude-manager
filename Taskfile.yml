# https://taskfile.dev

version: '3'

vars:
  CLAUDE_DIR: ~/.claude
  TUI_DIR: ./claude-session-tui
  BIN_DIR: ~/.local/bin

tasks:
  help:
    desc: "Show all available commands"
    cmds:
      - task --list-all
    
  quick-start:
    desc: "Quick start guide for Claude Manager"
    cmds:
      - echo "Claude Manager Quick Start:"
      - echo ""
      - echo "Session Management:"
      - echo "  task migrate    - Migrate sessions between paths"
      - echo "  task list       - List all projects and sessions"
      - echo "  task backup     - Backup Claude sessions"
      - echo ""
      - echo "TUI Interface:"
      - echo "  task tui:build  - Build the TUI interface"
      - echo "  task tui:demo   - Run TUI demo with sample data"
      - echo ""
      - echo "Federation Integration:"
      - echo "  task federation:install - Install federation dependencies"
      - echo "  task federation:build   - Build federation components"
      - echo "  task federation:dev     - Start federation dev server"
      - echo ""
      - echo "Combined Tasks:"
      - echo "  task all:build          - Build all components"
      - echo "  task all:test           - Test all components"
      - echo "  task dev:setup          - Setup development environment"
      - echo ""
      - echo "Setup:"
      - echo "  task install            - Install/update cm command"
      - echo "  task health             - Check system health"

  migrate:
    desc: "Migrate Claude session paths (interactive)"
    cmds:
      - echo "Starting interactive migration..."
      - cm migrate

  list:
    desc: "List all Claude projects and sessions"
    cmds:
      - cm list

  config:
    desc: "Show Claude Manager configuration"
    cmds:
      - cm config

  backup:
    desc: "Backup Claude sessions with timestamp"
    cmds:
      - |
        BACKUP_DIR="$HOME/claude-backups/$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        cp -r {{.CLAUDE_DIR}} "$BACKUP_DIR/"
        echo "Backup created: $BACKUP_DIR"

  tui:build:
    desc: "Build the Claude Session TUI"
    dir: "{{.TUI_DIR}}"
    cmds:
      - echo "Building Claude Session TUI..."
      - cargo build --release --features tui
      - echo "TUI built successfully!"

  tui:check:
    desc: "Check TUI compilation without building"
    dir: "{{.TUI_DIR}}"
    cmds:
      - cargo check --features tui

  tui:test:
    desc: "Run TUI tests"
    dir: "{{.TUI_DIR}}"
    cmds:
      - cargo test --features tui

  tui:demo:
    desc: "Create and run TUI demo with sample data"
    dir: "{{.TUI_DIR}}"
    cmds:
      - echo "Creating demo session data..."
      - mkdir -p demo_sessions
      - |
        cat > demo_sessions/sample.jsonl << 'EOF'
        {"role": "user", "content": "Hello Claude!", "timestamp": "2025-01-15T10:00:00Z", "thread_id": "demo-1"}
        {"role": "assistant", "content": "Hello! How can I help you today?", "timestamp": "2025-01-15T10:00:01Z", "thread_id": "demo-1"}
        EOF
      - echo "Demo data created in demo_sessions/"
      - echo "Launching TUI with demo data... (press 'q' to quit)"
      - cargo run --features tui -- demo_sessions

  tui:run:
    desc: "Run the TUI (optionally pass a directory)"
    dir: "{{.TUI_DIR}}"
    vars:
      SESSIONS_DIR:
        sh: echo "${SESSIONS_DIR:-demo_sessions}"
    cmds:
      - |
        if [ ! -d "{{.SESSIONS_DIR}}" ]; then
          echo "Sessions dir '{{.SESSIONS_DIR}}' not found. Creating and seeding demo...";
          mkdir -p demo_sessions;
          cat > demo_sessions/sample.jsonl << 'EOF'
          {"role": "user", "content": "Hello Claude!", "timestamp": "2025-01-15T10:00:00Z", "thread_id": "demo-1"}
          {"role": "assistant", "content": "Hello! How can I help you today?", "timestamp": "2025-01-15T10:00:01Z", "thread_id": "demo-1"}
          EOF
        fi
      - echo "Running TUI against '{{.SESSIONS_DIR}}' (press 'q' to quit)"
      - cargo run --features tui -- {{.SESSIONS_DIR}}

  install:
    desc: "Install/update Claude Manager command"
    cmds:
      - echo "Installing Claude Manager..."
      - mkdir -p {{.BIN_DIR}}
      - cp claude-manager.sh {{.BIN_DIR}}/cm
      - chmod +x {{.BIN_DIR}}/cm
      - echo "Claude Manager installed as 'cm' command"

  uninstall:
    desc: "Uninstall Claude Manager"
    cmds:
      - rm -f {{.BIN_DIR}}/cm
      - rm -f {{.BIN_DIR}}/cpm
      - echo "Claude Manager uninstalled"

  dev:setup:
    desc: "Setup development environment"
    cmds:
      - echo "Setting up Claude Manager development environment..."
      - task install
      - task tui:build
      - echo "Development setup complete!"

  clean:
    desc: "Clean build artifacts"
    dir: "{{.TUI_DIR}}"
    cmds:
      - cargo clean
      - rm -rf demo_sessions/
      - echo "Cleaned build artifacts"

  health:
    desc: "Check Claude Manager system health"
    cmds:
      - echo "Claude Manager Health Check:"
      - echo ""
      - |
        if [ -d {{.CLAUDE_DIR}} ]; then
          echo "Claude directory: Found"
        else
          echo "Claude directory: Missing"
        fi
      - |
        if command -v cm >/dev/null; then
          echo "cm command: Available"
        else
          echo "cm command: Not found"
        fi
      - |
        if command -v cargo >/dev/null; then
          echo "Rust toolchain: Available"
        else
          echo "Rust toolchain: Not found"
        fi

  bench:
    desc: "Run TUI performance benchmarks"
    dir: "{{.TUI_DIR}}"
    cmds:
      - echo "Running performance benchmarks..."
      - cargo bench

  docs:
    desc: "Generate and open documentation"
    dir: "{{.TUI_DIR}}"
    cmds:
      - echo "Generating documentation..."
      - cargo doc --open --no-deps

  federation:install:
    desc: "Install federation-integration dependencies"
    dir: federation-integration
    cmds:
      - echo "Installing federation dependencies..."
      - npm install

  federation:build:
    desc: "Build federation-integration"
    dir: federation-integration
    cmds:
      - echo "Building federation integration..."
      - npm run build

  federation:test:
    desc: "Test federation-integration"
    dir: federation-integration
    cmds:
      - echo "Running federation tests..."
      - npm test

  federation:dev:
    desc: "Start federation development server"
    dir: federation-integration
    cmds:
      - echo "Starting federation dev server..."
      - npm run dev

  all:build:
    desc: "Build all components (TUI + Federation)"
    cmds:
      - task tui:build
      - task federation:build
      - echo "All components built successfully!"

  all:test:
    desc: "Test all components"
    cmds:
      - task tui:test
      - task federation:test
      - task test
      - echo "All tests completed!"

  all:clean:
    desc: "Clean all build artifacts"
    cmds:
      - task clean
      - task federation:clean
      - echo "All artifacts cleaned!"

  federation:clean:
    desc: "Clean federation build artifacts"
    dir: federation-integration
    cmds:
      - rm -rf dist/ node_modules/.cache
      - echo "Federation artifacts cleaned"

  # ===== TEST AUTOMATION SUITE =====

  test:
    desc: "Run all test suites (unit, integration, regression)"
    cmds:
      - echo "🧪 Running claude-manager test suite..."
      - bats tests/unit/
      - bats tests/integration/
      - bats tests/regression/
      - echo "✅ All tests passed!"

  test:unit:
    desc: "Run unit tests only"
    cmds:
      - echo "Running unit tests..."
      - bats tests/unit/

  test:integration:
    desc: "Run integration tests only"
    cmds:
      - echo "Running integration tests..."
      - bats tests/integration/

  test:regression:
    desc: "Run regression tests only"
    cmds:
      - echo "Running regression tests..."
      - bats tests/regression/

  test:e2e:
    desc: "Run end-to-end tests only"
    cmds:
      - echo "Running E2E tests..."
      - bats tests/e2e/

  test:critical:
    desc: "Run critical tests only (fast - under 30s)"
    cmds:
      - echo "🚀 Running critical tests (path transformer + regressions)..."
      - bats tests/unit/test_path_transformer.bats || true
      - echo "✅ Critical tests completed"

  test:watch:
    desc: "Watch for changes and re-run critical tests"
    cmds:
      - |
        echo "👁️  Watching claude-manager.sh for changes..."
        echo "Press Ctrl+C to stop"
        if command -v fswatch >/dev/null; then
          fswatch -o claude-manager.sh | while read; do
            clear
            echo "🔄 Change detected, running tests..."
            task test:critical
          done
        else
          echo "⚠️  fswatch not installed, using polling mode"
          while true; do
            sleep 2
            if [ "$(find claude-manager.sh -mmin -0.1)" ]; then
              clear
              echo "🔄 Change detected, running tests..."
              task test:critical
            fi
          done
        fi

  test:coverage:
    desc: "Analyze test coverage"
    cmds:
      - echo "📊 Analyzing test coverage..."
      - |
        if [ -x tests/analyze_coverage.sh ]; then
          ./tests/analyze_coverage.sh
        else
          echo "Coverage analysis script not found"
          echo "Test files:"
          find tests -name "*.bats" -type f | wc -l
          echo "Test cases:"
          grep -r "@test" tests/ | wc -l
        fi

  test:install:
    desc: "Install bats test framework"
    cmds:
      - |
        if command -v bats >/dev/null; then
          echo "✅ Bats already installed: $(bats --version)"
        else
          echo "Installing bats-core..."
          if [ "$(uname)" = "Darwin" ]; then
            if command -v brew >/dev/null; then
              brew install bats-core
            else
              echo "❌ Homebrew not found. Install from: https://github.com/bats-core/bats-core"
            fi
          else
            echo "📥 Clone and install from: https://github.com/bats-core/bats-core"
            echo "git clone https://github.com/bats-core/bats-core.git"
            echo "cd bats-core && sudo ./install.sh /usr/local"
          fi
        fi

  test:quickstart:
    desc: "Show test quick start guide"
    cmds:
      - cat tests/QUICKSTART.md
