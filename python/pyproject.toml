[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-manager-tui"
version = "0.1.0"
description = "Type-safe visual session management for Claude"
authors = [
    {name = "Claude Manager Team"}
]
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Typing :: Typed",
]
keywords = ["claude", "session", "management", "tui", "type-safety"]
requires-python = ">=3.13"

dependencies = [
    "rich>=13.0.0",
    "prompt_toolkit>=3.0.0",
    "python-dateutil>=2.8.0",
    "typing_extensions>=4.8.0",
]

[project.optional-dependencies]
dev = [
    # Type checking
    "mypy>=1.8.0",
    "pyright>=1.1.350",
    
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.12.0",
    
    # Code quality
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-autodoc-typehints>=1.25.0",
    
    # Development tools
    "pre-commit>=3.5.0",
    "tox>=4.11.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.12.0",
]

typing = [
    "mypy>=1.8.0",
    "pyright>=1.1.350",
    "typing_extensions>=4.8.0",
]

[project.urls]
Homepage = "https://github.com/your-org/claude-manager"
Repository = "https://github.com/your-org/claude-manager.git"
Issues = "https://github.com/your-org/claude-manager/issues"

[project.scripts]
claude-manager-tui = "claude_manager_tui_typed:main"

# Build system configuration
[tool.hatch.build.targets.wheel]
py-modules = ["claude_manager_tui_typed", "claude_manager_tui"]

[tool.hatch.build.targets.sdist]
include = [
    "claude_manager_tui_typed.py",
    "claude_manager_tui.py", 
    "test_claude_manager_tui.py",
    "requirements.txt",
    "README.md"
]

# Tool configurations

[tool.mypy]
# Basic settings
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Strict mode settings
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

# Error reporting
show_error_codes = true
show_column_numbers = true
pretty = true

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Advanced features
enable_error_code = [
    "truthy-bool",
    "truthy-iterable", 
    "redundant-expr",
    "unused-awaitable",
    "ignore-without-code",
]

# Plugin settings
plugins = [
    "mypy_extensions",
]

# Per-module options
[[tool.mypy.overrides]]
module = "prompt_toolkit.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "rich.*"
ignore_missing_imports = true

[tool.pyright]
include = ["claude_manager_tui_typed.py", "test_claude_manager_tui.py"]
exclude = ["**/__pycache__"]

# Type checking settings
pythonVersion = "3.13"
typeCheckingMode = "strict"

# Enable all optional checks
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
reportImportCycles = "error"
reportUnusedImport = "warning"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "error"

# Advanced type checking
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverloads = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"

# Experimental features
enableExperimentalFeatures = true

[tool.ruff]
target-version = "py313"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C4",   # flake8-comprehensions
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "TRY003",  # Avoid specifying long messages outside the exception class
]

# Per-file ignores
[tool.ruff.per-file-ignores]
"test_*.py" = [
    "PLR2004", # Magic value used in comparison
    "S101",    # Use of assert detected
    "ARG001",  # Unused function argument
    "PT011",   # pytest.raises too broad
]

[tool.ruff.isort]
known-first-party = ["claude_manager_tui_typed"]
force-sort-within-sections = true

[tool.ruff.flake8-type-checking]
strict = true

[tool.black]
target-version = ['py313']
line-length = 100
skip-string-normalization = false
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["claude_manager_tui_typed"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=claude_manager_tui_typed",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = [".", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmark tests",
    "asyncio: marks tests as async tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["claude_manager_tui_typed"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py313, type-check, lint, test-cov
isolated_build = true

[testenv]
deps = 
    .[dev]
commands = 
    pytest {posargs}

[testenv:type-check]
deps = 
    .[typing]
commands = 
    mypy claude_manager_tui_typed.py
    pyright claude_manager_tui_typed.py

[testenv:lint]
deps = 
    .[dev]
commands = 
    ruff check .
    black --check .
    isort --check-only .

[testenv:format]
deps = 
    .[dev]
commands = 
    ruff check --fix .
    black .
    isort .

[testenv:test-cov]
deps = 
    .[test]
commands = 
    pytest --cov-report=xml --cov-report=html

[testenv:benchmark]
deps = 
    .[test]
commands = 
    pytest --benchmark-only --benchmark-sort=mean
"""